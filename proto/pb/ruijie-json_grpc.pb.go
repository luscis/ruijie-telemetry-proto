// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: ruijie-json.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Json_JsonSend_FullMethodName = "/ruijie_json.Json/JsonSend"
)

// JsonClient is the client API for Json service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonClient interface {
	JsonSend(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*JsonReply, error)
}

type jsonClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonClient(cc grpc.ClientConnInterface) JsonClient {
	return &jsonClient{cc}
}

func (c *jsonClient) JsonSend(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*JsonReply, error) {
	out := new(JsonReply)
	err := c.cc.Invoke(ctx, Json_JsonSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsonServer is the server API for Json service.
// All implementations must embed UnimplementedJsonServer
// for forward compatibility
type JsonServer interface {
	JsonSend(context.Context, *JsonRequest) (*JsonReply, error)
	mustEmbedUnimplementedJsonServer()
}

// UnimplementedJsonServer must be embedded to have forward compatible implementations.
type UnimplementedJsonServer struct {
}

func (UnimplementedJsonServer) JsonSend(context.Context, *JsonRequest) (*JsonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsonSend not implemented")
}
func (UnimplementedJsonServer) mustEmbedUnimplementedJsonServer() {}

// UnsafeJsonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonServer will
// result in compilation errors.
type UnsafeJsonServer interface {
	mustEmbedUnimplementedJsonServer()
}

func RegisterJsonServer(s grpc.ServiceRegistrar, srv JsonServer) {
	s.RegisterService(&Json_ServiceDesc, srv)
}

func _Json_JsonSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonServer).JsonSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Json_JsonSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonServer).JsonSend(ctx, req.(*JsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Json_ServiceDesc is the grpc.ServiceDesc for Json service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Json_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ruijie_json.Json",
	HandlerType: (*JsonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JsonSend",
			Handler:    _Json_JsonSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ruijie-json.proto",
}
